---
title: "Shiny App"
author: "Olivia Varricchione"
format: 
  html:
    embed-resources: true
---

```{r}
## data cleaning
library(tidyverse)
scoobydoo <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-07-13/scoobydoo.csv')
df <- scoobydoo |> select(2, 5, 13, 16, 18:41, 48, 54, 55, 58, 59, 62, 65, 17)
df <- df |> mutate(split_up = fct_recode(split_up, No = "0", Yes = "1", Yes = "2")) |>
  mutate(trap_work_first = if_else(is.na(trap_work_first),                    
                                       "NULL", trap_work_first)) |>
  mutate(trap_work_first = fct_recode(trap_work_first, No = "FALSE", Yes = "TRUE", "NA" = "NULL")) |>
  mutate(culprit_gender = fct_collapse(culprit_gender,
                                           Male = c("Male", "Male,Male",
                                                    "Male,Male,Male",
                                                    "Male,Male,Male,Male",
                                                    "Male,Male,Male,Male,Male"),
                                           Female = c("Female", "Female,Female"),
                                           "Male and Female" = c("Female,Female,Male",
                                                                 "Female,Male",
                                                                 "Female,Male, Male",
                                                         "Female,Male,Female,Male,Male",
                                                                 "Female,Male,Male",
                                                                "Female,Male,Male,Male",
                                                                 "Male,Female",                                                      "Male,Female,Female,Male,Male,Male,Female",
                     "Male,Female,Female,Male,Male,Male,Female,Female,Male,Male,Female",
                                                                 "Male,Female,Male",
                                                             "Male,Female,Male,Female",
                                                   "Male,Female,Male,Female,Male,Male",
                                                                 "Male,Male,Female",
                                                          "Male,Male,Female,Male,Male",
                                                               "Male,Male,Male,Female",
                          "Male,Male,Male,Male,Male,Male,Female,Male,Male,Male,Male"))) |>
  mutate(monster_type = fct_collapse(monster_type,
                                         "Ancient" = c("Ancient", "Ancient,Ancient",
                                                       "Ancient,Animal",   "Ancient,Ghost,Extraterrestrial,Animal,Disguised,Ghost,Possessed Object,Magician,Magician,Ghost,Undead,Possessed Object,",
                                                       "Ancient,Possessed", 
                                                       "Ancient,Possessed Object"),
                                         "Animal" = c("Animal", "Animal,Ancient",
                                                      "Animal,Ancient,Ancient,Mechanical,Plant",
                                                      "Animal,Animal",
                                                      "Animal,Animal,Animal",
                                                      "Animal,Animal,Animal,Animal",
                                                      "Animal,Animal,Mythical,Possessed Object,Possessed Object,Ghost,Undead",
                                                      "Animal,Disguised",
                                                      "Animal,Mechanical",
                                                      "Animal,Plant",
                                                      "Animal,Undead",
                                                      "Animal,Undead,Disguised,Animal,Disguise,Ghost,Ghost,Animal",
                                                      "Animal,Undead,Undead"),
                                         "Disguised" = c("Disguised", "Disguised,Animal",
                                                         "Disguised,Animal,Possessed Object,Possessed Object,Possessed Object,Ancient,Possessed Object,Undead,Ghost,Undead,Undead",
                                                         "Disguised,Disguised",
                                                         "Disguised,Disguised,Disguised,Disguised",
                                                         "Disguised,Skeleton",
                                                         "Disguised,Undead,Animal,Animal",
                                                         "Disguised,Undead,Undead"),
                                         "Extraterrestrial" = c("Extraterrestrial",
                                                                "Extraterrestrial,Animal,Extraterrestrial",
                                                                "Extraterrestrial,Extraterrestrial",
                                                                "Extraterrestrial,Extraterrestrial,Extraterrestrial"),
                                         "Ghost" = c("Ghost", "Ghost,Ancient", "Ghost,Animal",
                                                     "Ghost,Disguised",                   "Ghost,Disguised,Undead,Disguised,Animal,Animal,Animal,Ancient,Disguised",
                                                     "Ghost,Ghost",
                                                     "Ghost,Ghost,Animal","Ghost,Ghost,Ghost",
                                                     "Ghost,Ghost,Ghost,Ghost",
                                                     "Ghost,Ghost,Ghost,Ghost,Mythical",
                                                     "Ghost,Ghost,Magician,Ghost", 
                                                     "Ghost,Ghost,Mythical",
                                                     "Ghost,Ghost,Undead,Animal,Animal",
                                                     "Ghost,Ghost,Undead,Undead,Possessed Object,Ghost",
                                                     "Ghost,Mythical","Ghost,Plant,Animal",
                                                     "Ghost,Possessed Object","Ghost,Undead",
                                                     "Ghost,Undead,Undead",
                                                     "Ghost,Undead,Undead,Undead,Animal,Animal,Animal"),
                                         "Magician" = c("Magician", "Magician,Animal",
                                                        "Magician,Ghost,Ghost",
                                                        "Magician,Ghost,Plant,Plant,Animal",
                                                        "Magician,Magician,Magician,Magician",
                                                        "Magician,Plant,Magician,Animal",
                                                        "Magician,Possessed Object",
                                                        "Magician,Possessed Object,Mythical,Demon"),
                                         "Mechanical" = c("Mechanical", "Mechanical,Ghost",
                                                          "Mechanical,Mechanical",
                                                          "Mechanical,Mechanical,Mechanical",
                                                          "Mechanical,Mechanical,Mechanical,Mechanical,Mechanical",
                                                          "Mechanical,Super-Villain,Animal,Mythical",    "Mechanical,Super-Villain,Disguised,Disguised,Super-Villain,Super-Villain,Super-Villain,Mechanical"),
                                         "Mythical" = c("Mythical", "Mythical,Ancient", 
                                                        "Mythical,Animal,Magician",
                                                        "Mythical,Ghost,Ghost",
                                                        "Mythical,Ghost,Ghost,Ghost",
                                                        "Mythical,Ghost,Ghost,Undead,Undead,Undead,Undead",
                                                        "Mythical,Mythical",
                                                        "Mythical,Mythical,Mythical,Mythical,Possessed Object,Possessed Object,Possessed Object,Possessed Object,Possessed Object,Animal",
                                                        "Mythical,Mythical,Mythical,Undead,Mythical,Mythical",
                                                        "Mythical,Plant,Plant,Mythical,Animal,Animal",
                                                        "Mythical,Undead"),
                                         "Plant" = c("Plant", "Plant,Animal,Animal,Magician",
                                                     "Plant,Plant", "Plant,Possessed Object"),
                                         "Possessed Object" = c("Possessed Object", 
                                                                "Possessed Object,Ghost",
                                                                "Possessed Object,Ghost,Ghost",
                                                                "Possessed Object,Magician",
                                                                "Possessed Object,Mythical,Animal,Animal,Animal",
                                                                "Possessed Object,Possessed Object",
                                                                "Possessed Object,Possessed Object,Possessed Object"),
                                         "Super-Villain" = c("Super-Villain", 
                                                             "Super-Villain,Disguised,Disguised",
                                                             "Super-Villain,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Super-Villain",
                                                             "Super-Villain,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Super-Villain,Super-Villain,Super-Villain",
                                                             "Super-Villain,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Super-Villain",                                   "Super-Villain,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Super-Villain,Super-Villain,Super-Villain",                                      "Super-Villain,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Super-Villain",
                                                             "Super-Villain,Disguised,Disguised,Disguised,Disguised,Disguised,Super-Villain",
                                                             "Super-Villain,Disguised,Disguised,Super-Villain",
                                                             "Super-Villain,Mechanical,Disguised,Super-Villain",
                                                             "Super-Villain,Super-Villain,Disguised,Disguised,Super-Villain,Super-Villain",
                                                             "Super-Villain,Super-Villain,Super-Villain",
                                                             "Super-Villain,Super-Villain,Super-Villain,Disguised,Disguised,Disguised",
                                                             "Super-Villain,Super-Villain,Super-Villain,Super-Villain,Disguised",
                                                             "Super-Villain,Super-Villain,Super-Villain,Super-Villain,Super-Villain,Super-Villain,Super-Villain,Super-Villain,Super-Villain,Super-Villain,Super-Villain",
                                                             "Super-Villain,Super-Villain,Super-Villain,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised",
                                                             "Super-Villain,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Dr. Trebal",
                                                             "Super-Villain,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Dr. Trebal,Super-Villain",
                                                             "Super-Villain,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised, Disguised, Disguised,Super-Villain",
                                                             "Super-Villain,Super-Villain,Super-Villain,Disguised,Super-Villain,Super-Villain,Super-Villain",
                                                             "Super-Villain,Super-Villain,Mechanical,Super-Villain,Super-Villain,Disguised,Disguised",
                                                             "Super-Villain,Super-Villain,Disguised,Disguised,Super-Villain,Super-Villain,Disguised,Disguised,Disguised",
                                                             "Super-Villain,Super-Villain,Disguised,Disguised,Disguised,Disguised,Disguised,Super-Villain",
                                                             "Super-Villain,Super-Villain,Disguised,Disguised,Disguised,Disguised,Disguised,Disguised,Super-Villain,Super-Villain",
                                                             "Super-Villain,Disguised,Disguised,Disguised,Super-Villain,Super-Villain,Super-Villain,Super-Villain,Super-Villain",
                                                             "Super-Villain,Disguised,Disguised,Super-Villain,Super-Villain,Super-Villain,Animal,Animal,Undead,Undead,Undead,Animal",
                                                             "Super-Villain,Disguised,Disguised,Disguised,Super-Villain,Super-Villain,Super-Villain,Super-Villain,Super-Villain",
                                                             "Super-Villain,Disguised,Disugised,Disguised,Super-Villain,Super-Villain,Super-Villain,Animal,Animal"),
                                         "Undead" = c("Undead", "Undead,Animal", "Undead,Animal,Animal,Animal,Animal",
                                                      "Undead,Animal,Undead", "Undead,Ghost,Ghost,Ghost,Ancient,Ghost,Ghost",
                                                      "Undead,Ghost,Ghost,Ghost,Plant", "Undead,Ghost,Undead,Undead",
                                                      "Undead,Magician", "Undead,Undead", "Undead,Undead,Animal",
                                                      "Undead,Undead,Mythical,Mythical,Magician,Mythical,Mythical,Mythical",
                                                      "Undead,Undead,Plant,Animal",
                                                      "Undead,Undead,Undead", "Undead,Undead,Undead,Animal",
                                                      "Undead,Undead,Undead,Undead",
                                                      "Undead,Undead,Undead,Undead,Undead,Undead,Undead,Undead",
                                                      "Undead,Animal,Undead,Undead,Magician,Magician,Undead,Undead,Possessed Object,Undead,Disfigured,Disfigured,Animal,Disguised,Insect,Insect,Possessed Object,Animal,Plant"))) |>
  mutate(number_of_snacks = fct_collapse(number_of_snacks,
                                             "2" = c("2", "a couple"),
                                             "3" = c("3", "several"),
                                             "3 boxes" = c("3 boxes", "several boxes")))

caught_df <- df |> select(1, 2, 3, 4, 5, 6, 7, 8 , 9, 26, 27, 28, 29, 30, 31, 36) |> 
  mutate(caught_fred = as.factor(caught_fred)) |>
  mutate(caught_fred = if_else(caught_fred == "TRUE",
                               true = "Fred",
                               false = "0")) |>
  mutate(caught_daphnie = as.factor(caught_daphnie)) |>
  mutate(caught_daphnie = if_else(caught_daphnie == "TRUE",
                               true = "Daphnie",
                               false = "0")) |>
  mutate(caught_velma = as.factor(caught_velma)) |>
  mutate(caught_velma = if_else(caught_velma == "TRUE",
                               true = "Velma",
                               false = "0")) |>
  mutate(caught_shaggy = as.factor(caught_shaggy)) |>
  mutate(caught_shaggy = if_else(caught_shaggy == "TRUE",
                               true = "Shaggy",
                               false = "0")) |>
  mutate(caught_scooby = as.factor(caught_scooby)) |>
  mutate(caught_scooby = if_else(caught_scooby == "TRUE",
                               true = "Scooby",
                               false = "0")) |>
  mutate(caught_other = as.factor(caught_other)) |>
  mutate(caught_other = if_else(caught_other == "TRUE",
                               true = "Other",
                               false = "0")) |> 
  mutate(caught_not = as.factor(caught_not)) |>
  mutate(caught_not = if_else(caught_not == "TRUE",
                               true = "Not Caught",
                               false = "0")) |>
  pivot_longer(cols = (5:11), names_to = "who", values_to = "caught_by") |>
  separate(col = who, into = c("caught", "who"), sep = "_") |>
  mutate(caught_by = if_else(caught_by!=0, 1, 0))

captured_df <- df |> select(1:4, 10:14, 26:31, 36) |> 
  mutate(captured_fred = as.factor(captured_fred)) |>
  mutate(captured_fred = if_else(captured_fred == "TRUE",
                               true = "Fred",
                               false = "0")) |>
  mutate(captured_daphnie = as.factor(captured_daphnie)) |>
  mutate(captured_daphnie = if_else(captured_daphnie == "TRUE",
                               true = "Daphnie",
                               false = "0")) |>
  mutate(captured_velma = as.factor(captured_velma)) |>
  mutate(captured_velma = if_else(captured_velma == "TRUE",
                               true = "Velma",
                               false = "0")) |>
  mutate(captured_shaggy = as.factor(captured_shaggy)) |>
  mutate(captured_shaggy = if_else(captured_shaggy == "TRUE",
                               true = "Shaggy",
                               false = "0")) |>
  mutate(captured_scooby = as.factor(captured_scooby)) |>
  mutate(captured_scooby = if_else(captured_scooby == "TRUE",
                               true = "Scooby",
                               false = "0")) |>
  pivot_longer(cols = (5:9), names_to = "who", values_to = "captured_by") |>
  separate(col = who, into = c("captured", "who"), sep = "_") |>
  mutate(captured_by = if_else(captured_by!=0, 1, 0))

unmasked_df <- df |> select(1:4, 15:19, 25:31, 36) |> 
  mutate(unmask_fred = as.factor(unmask_fred)) |>
  mutate(unmask_fred = if_else(unmask_fred == "TRUE",
                               true = "Fred",
                               false = "0")) |>
  mutate(unmask_daphnie = as.factor(unmask_daphnie)) |>
  mutate(unmask_daphnie = if_else(unmask_daphnie == "TRUE",
                               true = "Daphnie",
                               false = "0")) |>
  mutate(unmask_velma = as.factor(unmask_velma)) |>
  mutate(unmask_velma = if_else(unmask_velma == "TRUE",
                               true = "Velma",
                               false = "0")) |>
  mutate(unmask_shaggy = as.factor(unmask_shaggy)) |>
  mutate(unmask_shaggy = if_else(unmask_shaggy == "TRUE",
                               true = "Shaggy",
                               false = "0")) |>
  mutate(unmask_scooby = as.factor(unmask_scooby)) |>
  mutate(unmask_scooby = if_else(unmask_scooby == "TRUE",
                               true = "Scooby",
                               false = "0")) |>
  mutate(unmask_other = as.factor(unmask_other)) |>
  mutate(unmask_other = if_else(unmask_other == "TRUE",
                               true = "Other",
                               false = "0")) |>
  pivot_longer(cols = (5:10), names_to = "who", values_to = "unmasked") |>
  separate(col = who, into = c("unmasked_by", "who"), sep = "_") |>
  mutate(unmasked = if_else(unmasked!=0, 1, 0))

snacks_df <- df |> select(1:4, 20:24, 26:31, 36) |> 
  mutate(snack_fred = as.factor(snack_fred)) |>
  mutate(snack_fred = if_else(snack_fred == "TRUE",
                               true = "Fred",
                               false = "0")) |>
  mutate(snack_daphnie = as.factor(snack_daphnie)) |>
  mutate(snack_daphnie = if_else(snack_daphnie == "TRUE",
                               true = "Daphnie",
                               false = "0")) |>
  mutate(snack_velma = as.factor(snack_velma)) |>
  mutate(snack_velma = if_else(snack_velma == "TRUE",
                               true = "Velma",
                               false = "0")) |>
  mutate(snack_shaggy = as.factor(snack_shaggy)) |>
  mutate(snack_shaggy = if_else(snack_shaggy == "TRUE",
                               true = "Shaggy",
                               false = "0")) |>
  mutate(snack_scooby = as.factor(snack_scooby)) |>
  mutate(snack_scooby = if_else(snack_scooby == "TRUE",
                               true = "Scooby",
                               false = "0")) |>
  pivot_longer(cols = (5:9), names_to = "who", values_to = "snacks") |>
  separate(col = who, into = c("snack", "who"), sep = "_") |>
  mutate(snacks = if_else(snacks!=0, 1, 0))

catchphrase_df <- df |> select(1:4, 32:35, 26:31, 36) |>
  pivot_longer(cols = (5:8), names_to = "catchphrase", values_to = "Count") |>
  mutate(Count = as.factor(Count)) |>
  mutate(Count = fct_recode(Count, "0" = "NULL")) |>
  mutate(Count = as.numeric(as.character(Count))) 
```

```{r}
## app
library(shiny)

series_vec <- catchphrase_df |> 
  mutate(series_name = as.factor(series_name)) |> 
  pull(series_name) |> 
  levels()

df <- df |> mutate(number_of_snacks = as.factor(number_of_snacks)) |>
  mutate(culprit_gender = as.factor(culprit_gender)) |>
  mutate(monster_amount = as.factor(monster_amount)) |>
  mutate(monster_real = as.factor(monster_real)) |>
  mutate(monster_type = as.factor(monster_type)) |>
  mutate(split_up = as.factor(split_up)) |>
  mutate(trap_work_first = as.factor(trap_work_first))

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      selectInput("var_select", label = "Choose a variable", 
                  choices = c("Captured", "Catchphrase", "Caught",
                              "Snacks", "Unmasked")),
      selectInput("series_select", label = "Choose a Scooby-Doo Series", 
                  choices = c(series_vec, "none"), selected = "none"),
      selectInput("filtering_var", label = "Choose a Variable to Filter By",
                     choices = c("culprit_gender", "monster_amount",
                                 "monster_real", "monster_type", "none",
                                 "number_of_snacks", "split_up", "trap_work_first"), 
                     selected = "none"),
      selectInput("sub_filter_var", label = "Choose What to Filter By", 
                     choices = NULL)
    ),
    mainPanel(
      plotOutput("barplot"),
      dataTableOutput("table")
    )
  )
)

server <- function(input, output, session){
  
  observeEvent(list(input$filtering_var,  input$series_select, input$var_select), {
    if(input$filtering_var == "none"){
      updateSelectInput(inputId = "sub_filter_var", choices = c("none"))
    }
    else{
      if(input$var_select == "Captured"){
        if(input$series_select == "none"){
          filtering_vec <- captured_df |> 
            filter(captured_by != 0) |>
            select(input$filtering_var) |>
            distinct()
          updateSelectInput(inputId = "sub_filter_var", choices = filtering_vec)
        }
        else{
        filtering_vec <- captured_df |> filter(series_name == input$series_select) |>
          filter(captured_by != 0) |>
          select(input$filtering_var) |> distinct()
        updateSelectInput(inputId = "sub_filter_var", choices = filtering_vec)
        }
      }
      if(input$var_select == "Catchphrase"){
        if(input$series_select == "none"){
          filtering_vec <- catchphrase_df |> 
            filter(Count != 0) |>
            select(input$filtering_var) |>
            distinct()
          updateSelectInput(inputId = "sub_filter_var", choices = filtering_vec)
        }
        else{
        filtering_vec <- catchphrase_df |> filter(series_name == input$series_select) |>
          filter(Count != 0) |>
          select(input$filtering_var) |> distinct()
        updateSelectInput(inputId = "sub_filter_var", choices = filtering_vec)
        }
      }
      if(input$var_select == "Caught"){
        if(input$series_select == "none"){
          filtering_vec <- caught_df |> 
            filter(caught_by != 0) |>
            select(input$filtering_var) |>
            distinct()
          updateSelectInput(inputId = "sub_filter_var", choices = filtering_vec)
        }
        else{
        filtering_vec <- caught_df |> filter(series_name == input$series_select) |>
          filter(caught_by != 0) |>
          select(input$filtering_var) |> distinct()
        updateSelectInput(inputId = "sub_filter_var", choices = filtering_vec)
        }
      }
      if(input$var_select == "Snacks"){
        if(input$series_select == "none"){
          filtering_vec <- snacks_df |> 
            filter(snacks != 0) |>
            select(input$filtering_var) |>
            distinct()
          updateSelectInput(inputId = "sub_filter_var", choices = filtering_vec)
        }
        else{
        filtering_vec <- snacks_df |> filter(series_name == input$series_select) |>
          filter(snacks != 0) |>
          select(input$filtering_var) |> distinct()
        updateSelectInput(inputId = "sub_filter_var", choices = filtering_vec)
        }
      }
      if(input$var_select == "Unmasked"){
        if(input$series_select == "none"){
          filtering_vec <- unmasked_df |> 
            filter(unmasked_by != 0) |>
            select(input$filtering_var) |>
            distinct()
          updateSelectInput(inputId = "sub_filter_var", choices = filtering_vec)
        }
        else{
        filtering_vec <- unmasked_df |> filter(series_name == input$series_select) |>
          filter(unmasked_by != 0) |>
          select(input$filtering_var) |> distinct()
        updateSelectInput(inputId = "sub_filter_var", choices = filtering_vec)
        }
      }
    }
  })
  
  output$barplot <- renderPlot({
    if(input$var_select == "Captured"){
      if(input$series_select == "none"){
        if(input$filtering_var == "none"){
          captured_df |> group_by(who) |> summarise(count = sum(captured_by)) |>
            ggplot(aes(x = who, y = count)) +
            geom_col(position = "dodge", fill = c("#7c68ae", "#76a2ca",
                                                  "#B87333","#b2bb1b", "#F8991D")) +
            labs(x = "Character", y = "Captured Count", 
                 title = "Overall captured count by character") +
            theme_minimal()
        }
        else{
          captured_df |> filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
            group_by(who) |> summarise(count = sum(captured_by)) |>
            ggplot(aes(x = who, y = count)) +
            geom_col(position = "dodge", fill = c("#7c68ae", "#76a2ca",
                                                  "#B87333","#b2bb1b", "#F8991D")) +
            labs(x = "Character", y = "Captured Count", 
                 title = glue::glue("Captured count by character with  ",
                                    input$sub_filter_var, " for the ",
                                    input$filtering_var)) +
            theme_minimal()
        }
      }
      else{
        if(input$filtering_var == "none"){
          captured_df |> filter(series_name == input$series_select) |> 
            group_by(who) |> summarise(count = sum(captured_by)) |>
            ggplot(aes(x = who, y = count)) +
            geom_col(position = "dodge", fill = c("#7c68ae", "#76a2ca",
                                                  "#B87333","#b2bb1b", "#F8991D")) +
            labs(x = "Character", y = "Captured Count", 
                 title = glue::glue("Captured count by character for ",
                                          input$series_select)) +
            theme_minimal()
        }
        else{
          captured_df |> filter(series_name == input$series_select) |> 
            filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
            group_by(who) |> summarise(count = sum(captured_by)) |>
            ggplot(aes(x = who, y = count)) +
            geom_col(position = "dodge", fill = c("#7c68ae", "#76a2ca",
                                                  "#B87333","#b2bb1b", "#F8991D")) +
            labs(x = "Character", y = "Captured Count", 
                 title = glue::glue("Captured count by character for ",
                                    input$series_select, " with  ",
                                    input$sub_filter_var, " for the ",
                                    input$filtering_var)) +
            theme_minimal()
        }
      }
    }
    else{
      if(input$var_select == "Catchphrase"){
        if(input$series_select == "none"){
          if(input$filtering_var == "none"){
            catchphrase_df |> group_by(catchphrase) |> summarise(count = sum(Count)) |>
              ggplot(aes(x = catchphrase, y = count)) +
              geom_col(position = "dodge", fill = c("#7c68ae", "#F8991D",
                                                    "#B87333","#b2bb1b")) +
              labs(x = "Catchphrase", y = "Count", 
                   title = "Overall catchphrase count") +
              theme_minimal()
          }
          else{
            catchphrase_df |> filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
              group_by(catchphrase) |> summarise(count = sum(Count)) |>
              ggplot(aes(x = catchphrase, y = count)) +
              geom_col(position = "dodge", fill = c("#7c68ae", "#F8991D",
                                                    "#B87333","#b2bb1b")) +
              labs(x = "Catchphrase", y = "Count", 
                   title = glue::glue("Catchphrase count with ",
                                      input$sub_filter_var, " for the ",
                                      input$filtering_var)) +
              theme_minimal()
          }
        }
        else{
          if(input$filtering_var == "none"){
            catchphrase_df |> filter(series_name == input$series_select) |> 
              group_by(catchphrase) |> summarise(count = sum(Count)) |>
              ggplot(aes(x = catchphrase, y = count)) +
              geom_col(position = "dodge", fill = c("#7c68ae", "#F8991D",
                                                    "#B87333","#b2bb1b")) +
              labs(x = "Catchphrase", y = "Count", 
                   title = glue::glue("Catchphrase count for ",
                                          input$series_select)) +
              theme_minimal()
          }
          else{
            catchphrase_df |> filter(series_name == input$series_select) |> 
              filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
              group_by(catchphrase) |> summarise(count = sum(Count)) |>
              ggplot(aes(x = catchphrase, y = count)) +
              geom_col(position = "dodge", fill = c("#7c68ae", "#F8991D",
                                                    "#B87333","#b2bb1b")) +
              labs(x = "Catchphrase", y = "Count", 
                   title = glue::glue("Catchphrase count for ",
                                      input$series_select, " with  ",
                                      input$sub_filter_var, " for the ",
                                      input$filtering_var)) +
              theme_minimal()
          }
        }
      }
      else{
        if(input$var_select == "Caught"){
          if(input$series_select == "none"){
            if(input$filtering_var == "none"){
              caught_df |> group_by(who) |> summarise(count = sum(caught_by)) |>
                ggplot(aes(x = who, y = count)) +
                geom_col(position = "dodge", fill = c("#7c68ae", "#76a2ca","black",
                                                      "red","#B87333","#b2bb1b",
                                                      "#F8991D")) +
                labs(x = "Character", y = "Caught Count", 
                     title = "Overall caught count by character") +
                theme_minimal()
            }
            else{
              caught_df |> filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
                group_by(who) |> summarise(count = sum(caught_by)) |>
                ggplot(aes(x = who, y = count)) +
                geom_col(position = "dodge", fill = c("#7c68ae", "#76a2ca", "black",
                                                      "red",
                                                      "#B87333","#b2bb1b", "#F8991D")) +
                labs(x = "Character", y = "Caught Count", 
                     title = glue::glue("Caught count by character with  ",
                                        input$sub_filter_var, " for the ",
                                        input$filtering_var)) +
                theme_minimal()
            }
          }
          else{
            if(input$filtering_var == "none"){
              caught_df |> filter(series_name == input$series_select) |> 
                group_by(who) |> summarise(count = sum(caught_by)) |>
                ggplot(aes(x = who, y = count)) +
                geom_col(position = "dodge", fill = c("#7c68ae", "#76a2ca", "black",
                                                      "red",
                                                      "#B87333","#b2bb1b", "#F8991D")) +
                labs(x = "Character", y = "Caught Count", 
                     title = glue::glue("Caught count by character for ",
                                          input$series_select)) +
                theme_minimal()
            }
            else{
              caught_df |> filter(series_name == input$series_select) |> 
                filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
                group_by(who) |> summarise(count = sum(caught_by)) |>
                ggplot(aes(x = who, y = count)) +
                geom_col(position = "dodge", fill = c("#7c68ae", "#76a2ca", "black",
                                                      "red",
                                                      "#B87333","#b2bb1b", "#F8991D")) +
                labs(x = "Character", y = "Caught Count", 
                     title = glue::glue("Caught count by character for ",
                                        input$series_select, " with  ",
                                        input$sub_filter_var, " for the ",
                                        input$filtering_var)) +
                theme_minimal()
            }
          }
        }
        else{
          if(input$var_select == "Snacks"){
            if(input$series_select == "none"){
              if(input$filtering_var == "none"){
                snacks_df |> group_by(who) |> summarise(count = sum(snacks)) |>
                  ggplot(aes(x = who, y = count)) +
                  geom_col(position = "dodge", fill = c("#7c68ae", "#76a2ca",
                                                        "#B87333","#b2bb1b",
                                                        "#F8991D")) +
                  labs(x = "Character", y = "Snack Count", 
                       title = "Overall snack count by character") +
                  theme_minimal()
              }
              else{
                snacks_df |> 
                  filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
                  group_by(who) |> summarise(count = sum(snacks)) |>
                  ggplot(aes(x = who, y = count)) +
                  geom_col(position = "dodge", fill = c("#7c68ae", "#76a2ca",
                                                        "#B87333","#b2bb1b",
                                                        "#F8991D")) +
                  labs(x = "Character", y = "Snack Count", 
                       title = glue::glue("Snack count by character with  ",
                                          input$sub_filter_var, " for the ",
                                          input$filtering_var)) +
                  theme_minimal()
              }
            }
            else{
              if(input$filtering_var == "none"){
                snacks_df |> filter(series_name == input$series_select) |> 
                  group_by(who) |> summarise(count = sum(snacks)) |>
                  ggplot(aes(x = who, y = count)) +
                  geom_col(position = "dodge", fill = c("#7c68ae", "#76a2ca",
                                                        "#B87333","#b2bb1b",
                                                        "#F8991D")) +
                  labs(x = "Character", y = "Snack Count", 
                       title = glue::glue("Snack count by character for ",
                                          input$series_select)) +
                  theme_minimal()
              }
              else{
                snacks_df |> filter(series_name == input$series_select) |> 
                  filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
                  group_by(who) |> summarise(count = sum(snacks)) |>
                  ggplot(aes(x = who, y = count)) +
                  geom_col(position = "dodge", fill = c("#7c68ae", "#76a2ca",
                                                        "#B87333","#b2bb1b",
                                                        "#F8991D")) +
                  labs(x = "Character", y = "Snack Count", 
                       title = glue::glue("Snack count by character for ",
                                          input$series_select, " with  ",
                                          input$sub_filter_var, " for the ",
                                          input$filtering_var)) +
                  theme_minimal()
              }
            }
          }
          else{
            if(input$var_select == "Unmasked"){
              if(input$series_select == "none"){
                if(input$filtering_var == "none"){
                  unmasked_df |> group_by(who) |> summarise(count = sum(unmasked)) |>
                    ggplot(aes(x = who, y = count)) +
                    geom_col(position = "dodge", fill = c("#7c68ae", "#76a2ca",
                                                          "black",
                                                          "#B87333","#b2bb1b",
                                                          "#F8991D")) +
                    labs(x = "Character", y = "Unmasked Count", 
                         title = "Overall unmasked count by character") +
                    theme_minimal()
                }
                else{
                  unmasked_df |> 
                    filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
                    group_by(who) |> summarise(count = sum(unmasked)) |>
                    ggplot(aes(x = who, y = count)) +
                    geom_col(position = "dodge", fill = c("#7c68ae", "#76a2ca",
                                                          "black",
                                                          "#B87333","#b2bb1b",
                                                          "#F8991D")) +
                    labs(x = "Character", y = "Unmasked Count", 
                         title = glue::glue("Unmasked count by character with  ",
                                            input$sub_filter_var, " for the ",
                                            input$filtering_var)) +
                    theme_minimal()
                }
              }
              else{
                if(input$filtering_var == "none"){
                  unmasked_df |> filter(series_name == input$series_select) |> 
                    group_by(who) |> summarise(count = sum(unmasked)) |>
                    ggplot(aes(x = who, y = count)) +
                    geom_col(position = "dodge", fill = c("#7c68ae", "#76a2ca",
                                                          "black",
                                                          "#B87333","#b2bb1b",
                                                          "#F8991D")) +
                    labs(x = "Character", y = "Unmasked Count", 
                         title = glue::glue("Unmasked count by character for ",
                                            input$series_select)) +
                    theme_minimal()
                }
                else{
                  unmasked_df |> filter(series_name == input$series_select) |> 
                    filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
                    group_by(who) |> summarise(count = sum(unmasked)) |>
                    ggplot(aes(x = who, y = count)) +
                    geom_col(position = "dodge", fill = c("#7c68ae", "#76a2ca",
                                                          "black",
                                                          "#B87333","#b2bb1b",
                                                          "#F8991D")) +
                    labs(x = "Character", y = "Unmasked Count", 
                         title = glue::glue("Unmasked count by character for ",
                                            input$series_select, " with  ",
                                            input$sub_filter_var, " for the ",
                                            input$filtering_var)) +
                    theme_minimal()
                }
              }
            }
          }
        }
      }
    }
  })

  output$table <- renderDataTable({
    if(input$var_select == "Captured"){
      if(input$series_select == "none"){
        if(input$filtering_var == "none"){
          captured_df |> mutate(Character = who) |> group_by(Character) |>
            summarise("Captured Count" = sum(captured_by))
        }
        else{
          captured_df |> filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
            mutate(Character = who) |> group_by(Character) |> 
            summarise("Captured Count" = sum(captured_by))
        }
      }
      else{
        if(input$filtering_var == "none"){
          captured_df |> filter(series_name == input$series_select) |>
            mutate(Character = who) |> group_by(Character) |>
            summarise("Captured Count" = sum(captured_by))
        }        
        else{
          captured_df |> filter(series_name == input$series_select) |>
            filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
            mutate(Character = who) |> group_by(Character) |>
            summarise("Captured Count" = sum(captured_by))
        }
      }
    }
    else{
      if(input$var_select == "Catchphrase"){
        if(input$series_select == "none"){
          if(input$filtering_var == "none"){
            catchphrase_df |> group_by(catchphrase) |>
              summarise("Catchphrase Count" = sum(Count))
          }
          else{
            catchphrase_df |> filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
              group_by(catchphrase) |> 
              summarise("Catchphrase Count" = sum(Count))
          }
        }
        else{
          if(input$filtering_var == "none"){
            catchphrase_df |> filter(series_name == input$series_select) |>
              group_by(catchphrase) |>
              summarise("Catchphrase Count" = sum(Count))
          }        
          else{
            catchphrase_df |> filter(series_name == input$series_select) |>
              filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
              group_by(catchphrase) |>
              summarise("Catchphrase Count" = sum(Count))
          }
        }
      }
      else{
        if(input$var_select == "Caught"){
          if(input$series_select == "none"){
            if(input$filtering_var == "none"){
              caught_df |> mutate(Character = who) |> group_by(Character) |>
                summarise("Caught Count" = sum(caught_by))
            }
            else{
              caught_df |> filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
                mutate(Character = who) |> group_by(Character) |> 
                summarise("Caught Count" = sum(caught_by))
            }
          }
          else{
            if(input$filtering_var == "none"){
              caught_df |> filter(series_name == input$series_select) |>
                mutate(Character = who) |> group_by(Character) |>
                summarise("Caught Count" = sum(caught_by))
            }        
            else{
              caught_df |> filter(series_name == input$series_select) |>
                filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
                mutate(Character = who) |> group_by(Character) |>
                summarise("Caught Count" = sum(caught_by))
            }
          }
        }
        else{
          if(input$var_select == "Snacks"){
            if(input$series_select == "none"){
              if(input$filtering_var == "none"){
                snacks_df |> mutate(Character = who) |> group_by(Character) |>
                  summarise("Captured Count" = sum(snacks))
              }
              else{
                snacks_df |> 
                  filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
                  mutate(Character = who) |> group_by(Character) |> 
                  summarise("Captured Count" = sum(snacks))
              }
            }
            else{
              if(input$filtering_var == "none"){
                snacks_df |> filter(series_name == input$series_select) |>
                  mutate(Character = who) |> group_by(Character) |>
                  summarise("Captured Count" = sum(snacks))
              }        
              else{
                snacks_df |> filter(series_name == input$series_select) |>
                  filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
                  mutate(Character = who) |> group_by(Character) |>
                  summarise("Captured Count" = sum(snacks))
              }
            }
          }
          else{
            if(input$var_select == "Unmasked"){
              if(input$series_select == "none"){
                if(input$filtering_var == "none"){
                  unmasked_df |> mutate(Character = who) |> group_by(Character) |>
                    summarise("Captured Count" = sum(unmasked))
                }
                else{
                  unmasked_df |> 
                    filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
                    mutate(Character = who) |> group_by(Character) |> 
                    summarise("Captured Count" = sum(unmasked))
                }
              }
              else{
                if(input$filtering_var == "none"){
                  unmasked_df |> filter(series_name == input$series_select) |>
                    mutate(Character = who) |> group_by(Character) |>
                    summarise("Captured Count" = sum(unmasked))
                }        
                else{
                  unmasked_df |> filter(series_name == input$series_select) |>
                    filter(.data[[input$filtering_var]] == input$sub_filter_var) |>
                    mutate(Character = who) |> group_by(Character) |>
                    summarise("Captured Count" = sum(unmasked))
                }
              }
            }
          }
        }
      }
    }
  })
}

shinyApp(ui, server)
```
